@page "/ResolveCitation"
@layout UnAuthLayout
@inherits ResolveCitationBase

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<div class="homepage">
    <div class="homepage__resolve-citation">
        <EditForm Model="@EditContext" OnValidSubmit="@OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Enter your citation number to retrieve all associated citations</MudText>
                    <MudTextField Label="Citation Number" Variant="Variant.Outlined"
                                  @bind-Value="LoginData.citation_number" For="@(() => LoginData.citation_number)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Resolve</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
</div>

@*
        <MudCard>
            <EditForm EditContext="@EditContext" OnSubmit="@HandleSubmit">
                <MudCardContent>
                    <MudTextField Label="Licence Plate Number" Variant="Variant.Outlined"
                                  @bind-Value="LoginData.plate_number" For="@(() => LoginData.plate_number)" />
                    <MudTextField Label="Licence Number" Variant="Variant.Outlined"
                                  @bind-Value="LoginData.licence_number" For="@(() => LoginData.licence_number)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </EditForm>
        </MudCard>
    </div>

        @code {
            bool success;
            string[] errors = { };
            MudTextField<string> CitationNumber;
            MudForm form;


            private IEnumerable<string> ValidLicencePlate(string pw)
            {
                if (string.IsNullOrWhiteSpace(pw))
                {
                    yield return "Password is required!";
                    yield break;
                }
                if (pw.Length < 8)
                    yield return "Password must be at least of length 8";
                if (!Regex.IsMatch(pw, @"[A-Z]"))
                    yield return "Password must contain at least one capital letter";
                if (!Regex.IsMatch(pw, @"[a-z]"))
                    yield return "Password must contain at least one lowercase letter";
                if (!Regex.IsMatch(pw, @"[0-9]"))
                    yield return "Password must contain at least one digit";
            }

        }
*@
