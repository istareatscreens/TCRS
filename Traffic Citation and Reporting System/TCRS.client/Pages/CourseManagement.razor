@page "/Coursemanagement"
@inherits CourseManagementBase
@using System.ComponentModel.DataAnnotations

<MudText Typo="Typo.h3">Course Management</MudText>

<div class="citation-body">
    <div style="max-width: 400px;">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudTextField @bind-Value="GetPersonName" Label="Instructor Name:" ReadOnly="true" Variant="Variant.Filled" />
                    <MudTextField @bind-Value="GetPersonID" Label="Person ID:" ReadOnly="true" Variant="Variant.Filled" />
                    
                    <MudTextField Label="Course ID" Variant="Variant.Outlined"
                                  @bind-Value="model.course_id" For="@(() => model.course_id)" />
                    <MudTextField Label="Course Type" Variant="Variant.Outlined"
                                  @bind-Value="model.type" For="@(() => model.type)" />
                    <MudTextField Label="Course Address" Variant="Variant.Outlined"
                                  @bind-Value="model.address" For="@(() => model.address)" />
                    <MudTextField Label="Course Name" Variant="Variant.Outlined"
                                  @bind-Value="model.name" For="@(() => model.name)" />
                    <MudTextField Label="Course Scheduled Date and Time" Variant="Variant.Outlined"
                                  @bind-Value="model.scheduled" For="@(() => model.scheduled)" />
                    <MudTextField Label="Course Price" Variant="Variant.Outlined"
                                  @bind-Value="model.price" For="@(() => model.price)" />
                    <MudTextField Label="Course Description" Variant="Variant.Outlined"
                                  @bind-Value="model.description" For="@(() => model.description)" />
                    <MudTextField Label="Course Title" Variant="Variant.Outlined"
                                  @bind-Value="model.title" For="@(() => model.title)" />
                    <MudTextField Label="Citation Capacity" Variant="Variant.Outlined"
                                  @bind-Value="model.capacity" For="@(() => model.capacity)" />
                    <MudTextField Label="Citation Type ID" Variant="Variant.Outlined"
                                  @bind-Value="model.citation_type_id" For="@(() => model.citation_type_id)" />
                    <MudTextField Label="School ID" Variant="Variant.Outlined"
                                  @bind-Value="model.school_id" For="@(() => model.school_id)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Post Class</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>

    @code {
        RegisterAccountForm model = new RegisterAccountForm();
        bool success;

        public class RegisterAccountForm
        {
            [Required]
            [StringLength(8, ErrorMessage = "Invalid course_id")]
            public string course_id { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid type")]
            public string type { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid address")]
            public string address { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid name")]
            public string name { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid Scheduled Time")]
            public string scheduled { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid price")]
            public string price { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid description")]
            public string description { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid title")]
            public string title { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid instructor")]
            public string instructor { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid capacity")]
            public string capacity { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid citation type id")]
            public string citation_type_id { get; set; }

            [Required]
            [StringLength(8, ErrorMessage = "Invalid school id")]
            public string school_id { get; set; }

        }

        private void OnValidSubmit(EditContext context)
        {
            success = true;
            StateHasChanged();
        }

        public string Disabled { get; set; }

        public string GetPersonName { get; set; } = "Instructor Name Here";
        public string GetPersonID { get; set; } = "Person ID Here";
    }

</div>